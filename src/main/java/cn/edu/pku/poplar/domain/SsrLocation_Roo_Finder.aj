// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cn.edu.pku.poplar.domain;

import cn.edu.pku.poplar.domain.SsrLocation;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect SsrLocation_Roo_Finder {
    
    public static TypedQuery<SsrLocation> SsrLocation.findSsrLocationsByUniGeneIdLike(String uniGeneId) {
        if (uniGeneId == null || uniGeneId.length() == 0) throw new IllegalArgumentException("The uniGeneId argument is required");
        uniGeneId = uniGeneId.replace('*', '%');
        if (uniGeneId.charAt(0) != '%') {
            uniGeneId = "%" + uniGeneId;
        }
        if (uniGeneId.charAt(uniGeneId.length() - 1) != '%') {
            uniGeneId = uniGeneId + "%";
        }
        EntityManager em = SsrLocation.entityManager();
        TypedQuery<SsrLocation> q = em.createQuery("SELECT o FROM SsrLocation AS o WHERE LOWER(o.uniGeneId) LIKE LOWER(:uniGeneId)", SsrLocation.class);
        q.setParameter("uniGeneId", uniGeneId);
        return q;
    }

    public static TypedQuery<SsrLocation> SsrLocation.findSsrLocationsByBean(SsrLocation ssrLocation) {
        if(ssrLocation == null) {
            throw new IllegalArgumentException("The ssrLocation must not be null");
        }
        StringBuilder hql = new StringBuilder("SELECT o FROM SsrLocation AS o");
        StringBuilder andClause = new StringBuilder();
        andClause.append(getAndClauseHql("cdsOrUtr", ssrLocation.getCdsOrUtr()));
        andClause.append(getAndClauseHql("locationGene", ssrLocation.getLocationGene()));
        andClause.append(getAndClauseHql("locationInScaffold", ssrLocation.getLocationInScaffold()));
        andClause.append(getAndClauseHql("pacId", ssrLocation.getPacId()));
        andClause.append(getAndClauseHql("scaffold", ssrLocation.getScaffold()));
        andClause.append(getAndClauseHql("seqOfScaffold", ssrLocation.getSeqOfScaffold()));
        andClause.append(getAndClauseHql("ssr", ssrLocation.getSsr()));
        andClause.append(getAndClauseHql("strand", ssrLocation.getStrand()));
        andClause.append(getAndClauseHql("uniGeneId", ssrLocation.getUniGeneId()));
        if(andClause.length() > 0) {
            int andIndex = andClause.indexOf("and");
            andClause.replace(andIndex, andIndex + 3, "where");
            hql.append(andClause.toString());
        }
        EntityManager em = SsrLocation.entityManager();
        TypedQuery<SsrLocation> q = em.createQuery(hql.toString(), SsrLocation.class);
        return q;
    }
    
    private static String SsrLocation.getAndClauseHql(String fieldName, String filedValue) {
        if(filedValue == null || filedValue.trim().equals("")) {
            return "";
        } else {
            return " and " + fieldName + " = '" + filedValue + "'";
        }
    }
    
}
